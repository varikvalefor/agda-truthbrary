\documentclass{article}

\usepackage{ar}
\usepackage[bw]{agda}
\usepackage{ifsym}
\usepackage{xcolor}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{parskip}
\usepackage{mathabx}
\usepackage{unicode-math}
\usepackage{newunicodechar}

\newunicodechar{Œª}{\ensuremath{\mathnormal\lambda}}
\newunicodechar{‚àÉ}{\ensuremath{\mathnormal\exists}}
\newunicodechar{‚àÑ}{\ensuremath{\mathnormal\nexists}}
\newunicodechar{‚à∑}{\ensuremath{\mathnormal\Colon}}
\newunicodechar{‚à®}{\ensuremath{\mathnormal\vee}}
\newunicodechar{‚Ñï}{\ensuremath{\mathnormal{\mathbb{N}}}}
\newunicodechar{‚àà}{\ensuremath{\mathnormal\in}}
\newunicodechar{‚àâ}{\ensuremath{\mathnormal\notin}}
\newunicodechar{‚àã}{\ensuremath{\mathnormal\ni}}
\newunicodechar{‚â°}{\ensuremath{\mathnormal\equiv}}
\newunicodechar{‚â¢}{\ensuremath{\mathnormal\nequiv}}
\newunicodechar{‚âü}{\ensuremath{\stackrel{?}{=}}}
\newunicodechar{‚ü®}{\ensuremath{\mathnormal\langle}}
\newunicodechar{‚ü©}{\ensuremath{\mathnormal\rangle}}
\newunicodechar{‚ü™}{\ensuremath{\mathnormal{\langle\hspace{-0.2em}\langle}}}
\newunicodechar{‚ü´}{\ensuremath{\mathnormal{\rangle\hspace{-0.2em}\rangle}}}
\newunicodechar{‚àé}{\ensuremath{\mathnormal\blacksquare}}
\newunicodechar{‚à∂}{\ensuremath{\mathnormal\colon\!\!}}
\newunicodechar{‚äπ}{\ensuremath{\mathnormal\dag}}
\newunicodechar{¬Ø}{\ensuremath{\mathnormal{^{-}}}}
\newunicodechar{‚óÉ}{\ensuremath{\mathnormal\triangleleft}}
\newunicodechar{‚ñπ}{\ensuremath{\mathnormal\triangleright}}
\newunicodechar{ùïó}{\ensuremath{\mathnormal{\mathbb{f}}}}
\newunicodechar{‚Ñô}{\ensuremath{\mathnormal{\mathbb{P}}}}
\newunicodechar{ùîΩ}{\ensuremath{\mathnormal{\mathbb{F}}}}
\newunicodechar{ùïä}{\ensuremath{\mathnormal{\mathbb{S}}}}
\newunicodechar{ùïÑ}{\ensuremath{\mathnormal{\mathbb{M}}}}
\newunicodechar{ùïÉ}{\ensuremath{\mathnormal{\mathbb{L}}}}
\newunicodechar{‚Ñö}{\ensuremath{\mathnormal{\mathbb{Q}}}}
\newunicodechar{‚Ñù}{\ensuremath{\mathnormal{\mathbb{R}}}}
\newunicodechar{‚Ñ§}{\ensuremath{\mathnormal{\mathbb{Z}}}}
\newunicodechar{ùîª}{\ensuremath{\mathnormal{\mathbb{D}}}}
\newunicodechar{‚ÑÇ}{\ensuremath{\mathnormal{\mathbb{C}}}}
\newunicodechar{ùîπ}{\ensuremath{\mathnormal{\mathbb{B}}}}
\newunicodechar{ŒΩ}{\ensuremath{\mathnormal{\nu}}}
\newunicodechar{Œº}{\ensuremath{\mathnormal{\mu}}}
\newunicodechar{‚óÜ}{\ensuremath{\mathnormal\blackdiamond}}
\newunicodechar{‚àô}{\ensuremath{\mathnormal\bullet}}
\newunicodechar{‚à∏}{\ensuremath{\mathnormal\dotdiv}}
\newunicodechar{·µá}{\ensuremath{\mathnormal{^\AgdaFontStyle{b}}}}
\newunicodechar{‚Åª}{\ensuremath{\mathnormal{^-}}}
\newunicodechar{‚â•}{\ensuremath{\mathnormal{\geq}}}
\newunicodechar{‚âØ}{\ensuremath{\mathnormal{\ngtr}}}
\newunicodechar{œï}{\ensuremath{\mathnormal{\phi}}}
\newunicodechar{œá}{\ensuremath{\mathnormal{\chi}}}
\newunicodechar{‚àß}{\ensuremath{\mathnormal{\wedge}}}
\newunicodechar{‚àÖ}{\ensuremath{\mathnormal{\emptyset}}}
\newunicodechar{‚à£}{\ensuremath{\mathnormal{|}}}
\newunicodechar{‚Åá}{\ensuremath{\mathnormal{\mathrm{?\!?}}}}
\newunicodechar{‚àò}{\ensuremath{\mathnormal{\circ}}}
\newunicodechar{‚àÄ}{\ensuremath{\mathnormal{\forall}}}
\newunicodechar{‚Ñì}{\ensuremath{\mathnormal{\ell}}}
\newunicodechar{œÉ}{\ensuremath{\mathnormal{\sigma}}}
\newunicodechar{‚ÇÅ}{\ensuremath{\mathnormal{_1}}}
\newunicodechar{‚ÇÇ}{\ensuremath{\mathnormal{_2}}}
\newunicodechar{‚Çò}{\ensuremath{\mathnormal{_\mathsf{m}}}}
\newunicodechar{‚Çõ}{\ensuremath{\mathnormal{_\mathsf{s}}}}
\newunicodechar{‚ä§}{\ensuremath{\mathnormal{\top}}}
\newunicodechar{‚ä•}{\ensuremath{\mathnormal{\bot}}}
\newunicodechar{‚â§}{\ensuremath{\mathnormal{\leq}}}
\newunicodechar{‚çâ}{\ensuremath{\mathnormal{‚àò\hspace{-0.455em}\backslash}}}
\newunicodechar{‚¶É}{\ensuremath{\mathnormal{\lbrace\!\lbrace}}}
\newunicodechar{‚¶Ñ}{\ensuremath{\mathnormal{\rbrace\!\rbrace}}}
\newunicodechar{·µ¢}{\ensuremath{\mathnormal{_i}}}
\newunicodechar{‚Çó}{\ensuremath{\mathnormal{_l}}}
\newunicodechar{‚Çí}{\ensuremath{\mathnormal{_o}}}
\newunicodechar{‚Çö}{\ensuremath{\mathnormal{_p}}}
\newunicodechar{‚Çô}{\ensuremath{\mathnormal{_n}}}
\newunicodechar{·µ•}{\ensuremath{\mathnormal{_v}}}
\newunicodechar{‚Ä≤}{\ensuremath{\mathnormal{'}}}
\newunicodechar{‚äé}{\ensuremath{\mathnormal{\uplus}}}
\newunicodechar{‚âó}{\ensuremath{\mathnormal{\circeq}}}
\newunicodechar{‚áí}{\ensuremath{\mathnormal{\Rightarrow}}}
\newunicodechar{‚áê}{\ensuremath{\mathnormal{\Leftarrow}}}
\newunicodechar{‚âà}{\ensuremath{\mathnormal{\approx}}}
\newunicodechar{‚ââ}{\ensuremath{\mathnormal{\napprox}}}
\newunicodechar{‚åä}{\ensuremath{\mathnormal{\lfloor}}}
\newunicodechar{‚äì}{\ensuremath{\mathnormal{\sqcap}}}
\newunicodechar{‚äî}{\ensuremath{\mathnormal{\sqcup}}}
\newunicodechar{‚ç®}{\raisebox{-0.25ex}{$\ddot\sim$}}

\newcommand\Sym\AgdaSymbol
\newcommand\D\AgdaDatatype
\newcommand\F\AgdaFunction
\newcommand\B\AgdaBound
\newcommand\IC\AgdaInductiveConstructor
\newcommand\OpF[1]{\AgdaOperator{\F{#1}}}

\title{la'o zoi.\ \texttt{Truthbrary.Data.Mrena'u}\ .zoi.}
\author{la .varik.\ .VALefor.}

\begin{document}
\maketitle

\begin{abstract}
\noindent
ni'o bau la .lojban.\ joi la'oi .Agda.\ la .varik.\ cu ciksi ko'a goi lo mrena'u se ctaipe ge'u je lo jai filri'a be tu'a ko'a
\end{abstract}

\section{le vrici}

\begin{code}
{-# OPTIONS
  --safe
  --cubical-compatible
#-}

module Truthbrary.Data.Mrena'u where

open import Level
  using (
  )
open import Algebra
  using (
    LeftIdentity;
    Associative;
    Commutative;
    IsRing;
    Zero;
    Op‚ÇÇ
  )
open import Data.Fin
  as ùîΩ
  using (
  )
open import Data.Nat
  as ‚Ñï
  using (
    ‚Ñï
  )
open import Data.Sum
  as _‚äé_
  using (
    inj‚ÇÇ;
    inj‚ÇÅ;
    _‚äé_
  )
open import Function
  using (
    _-‚ü™_‚ü´-_;
    const;
    _‚àò‚ÇÇ_;
    _‚àò_;
    _$_
  )
  renaming (
    flip to _‚ç®
  )
open import Data.Bool
  as ùîπ
  using (
    if_then_else_;
    false;
    Bool;
    true;
    not
  )
open import Data.List
  as ùïÉ
  using (
    List
  )
open import Data.Sign
  using (
    Sign
  )
open import Data.Digit
  using (
    Digit
  )
open import Data.Empty
  using (
    ‚ä•
  )
open import Data.Integer
  as ‚Ñ§
  using (
    ‚Ñ§
  )
open import Data.Product
  using (
    proj‚ÇÇ;
    proj‚ÇÅ;
    _√ó_;
    _,_;
    ‚àÉ
  )
open import Data.Rational
  as ‚Ñö
  using (
    ‚Ñö
  )
open import Relation.Binary
  using (
    Irreflexive;
    Asymmetric;
    Transitive;
    Reflexive;
    Setoid
  )
open import Relation.Nullary
  using (
    ¬¨_
  )
open import Data.Fin.Patterns
  using (
    9F
  )
open import Data.Nat.Coprimality
  as Coprime
  using (
    1-coprimeTo
  )
open import Relation.Nullary.Negation
  using (
  )
  renaming (
    contradiction to _‚áí‚áê_
  )
open import Relation.Binary.PropositionalEquality
  using (
    module ‚â°-Reasoning;
    subst;
    _‚âó_;
    _‚â°_;
    refl;
    sym
  )
\end{code}

\section{la'oi .\F ‚Ñù.}
ni'o ro da zo'u da mrena'u jo cu ctaipe la'oi .\F ‚Ñù.  .i la'o zoi.\ \IC{\AgdaUnderscore{},\AgdaUnderscore} \B s \Sym(\IC{\AgdaUnderscore{},\AgdaUnderscore{}}\B a \B b\Sym)\ .zoi.\ poi ke'a ctaipe la'oi .\F ‚Ñù.\ cu pilji lo sumji be la'oi .\B a.\ bei lo mu'oi glibau.\ decimal expansion .glibau.\ namcu be la'oi .\B b.\ zo'e poi ga jonai ga je la'oi .\B s.\ du la'o zoi.\ \IC{Sign.+}\ .zoi.\ gi ke'a du li pa gi ga je la'oi .\B s.\ du la'o zoi.\ \IC{Sign.-}\ .zoi.\ gi ke'a du li ni'u pa  .i ga jo la'oi .\F ‚Ñù.\ se ctaipe ko'a goi la'o zoi.\ \IC{\AgdaUnderscore{},\AgdaUnderscore} \AgdaUnderscore{} \Sym(\IC{\AgdaUnderscore{},\AgdaUnderscore} \AgdaUnderscore\ \B f\Sym)\ .zoi.\ gi la'o zoi.\ \B f \B n\ .zoi.\ meirmoi la'oi .\B n.\ fo lo me'oi .digit.\ be lo cmalu pagbu be lo mu'oi glibau.\ decimal expansion .glibau.\ be ko'a

.i la .varik.\ cu pacna lo nu frili cumki fa lo nu xagzengau pe'a le lojbo je velcki

\begin{code}
‚Ñù : Set
‚Ñù = Sign √ó ‚Ñï √ó (‚Ñï ‚Üí Digit 10)
\end{code}

\subsection{tu'a li ni'u no}
ni'o la'oi .\F ‚Ñù.\ jai .indika le du'u li no na du li ni'u no  .i la .varik.\ na mutce le ka ce'u tolnei la'e di'u  .i krinu la'e di'u fa le su'u la .varik.\ cu nelci le su'u sampu  .i ku'i cumki fa lo nu la .varik.\ cu binxo

\section{la'o zoi.\ \F{\AgdaUnderscore{}‚âà\AgdaUnderscore}\ .zoi.}
ni'o ga jo ctaipe la'o zoi.\ \B r \OpF ‚âà \B s\ .zoi.\ gi la'oi .\B r.\ namcu du la'oi .\B s.

\begin{code}
_‚âà_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Set
_‚âà_ = ‚äé/ $ _‚â°_ ùïÉ.‚à∑ {!!}
  where
  ‚äé/ : ‚àÄ {a} ‚Üí {A : Set a} ‚Üí let C = A ‚Üí A ‚Üí Set in List C ‚Üí C
  ‚äé/ = ùïÉ.foldr _-‚ü™ _‚äé_ ‚ü´-_ $ Œª _ _ ‚Üí ‚ä•
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}>\AgdaUnderscore}\ .zoi.}
ni'o ga jo ctaipe la'o zoi.\ \B a \OpF{>} \B b\ .zoi.\ gi la'oi .\B a.\ dubmau la'oi .\B b.

\begin{code}
_>_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Set
_>_ = {!!}
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}<\AgdaUnderscore}\ .zoi.}
ni'o ga jo ctaipe la'o zoi.\ \B a \OpF{<} \B b\ .zoi.\ gi la'oi .\B a.\ dubme'a la'oi .\B b.

\begin{code}
_<_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Set
_<_ = _>_ ‚ç®
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}‚â•\AgdaUnderscore}\ .zoi.}
ni'o ga jo ctaipe la'o zoi.\ \B a \OpF ‚â• \B b\ .zoi.\ gi la'oi .\B a.\ dubjavmau la'oi .\B b.

\begin{code}
_‚â•_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Set
_‚â•_ r s = (r ‚âà s) ‚äé (r > s)
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}‚â§\AgdaUnderscore}\ .zoi.}
ni'o ga jo ctaipe la'o zoi.\ \B a \OpF ‚â§ \B b\ .zoi.\ gi la'oi .\B a.\ dubjavme'a la'oi .\B b.

\begin{code}
_‚â§_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Set
_‚â§_ = _‚â•_ ‚ç®
\end{code}

\section{la'o zoi.\ \F{‚åä'}\ .zoi.}
ni'o du la'oi .\B r.\ fa lo sumji be la'o zoi.\ \F{‚åä'} \B r\ .zoi.\ be lo co'e be la'o zoi.\ \AgdaField{proj‚ÇÇ} \OpF \$ \AgdaField{proj‚ÇÇ} \B r\ .zoi.

\begin{code}
‚åä' : ‚Ñù ‚Üí ‚Ñ§
‚åä' (Sign.+ , n , _) = ‚Ñ§.+ n
‚åä' (Sign.- , n , _) = ‚Ñ§.-_ $ ‚Ñ§.+_ n
\end{code}

\section{la'o zoi.\ \F{‚åä'‚Åª¬π}\ .zoi.}
ni'o la'o zoi.\ \F{‚åä'‚Åª¬π} \B r\ .zoi.\ mu'oi glibau.\ decimal expansion .glibau.\ co'e la'oi .\B r.  .i la .varik.\ cu stidi lo nu lo na jimpe cu tcidu le velcki be la'o zoi.\ \F{‚åä'‚Åª¬π}\ .zoi.\ be'o je le velcki be la'oi .\F ‚Ñù.

\begin{code}
‚åä'‚Åª¬π : ‚Ñù ‚Üí ‚Ñï ‚Üí Digit 10
‚åä'‚Åª¬π = proj‚ÇÇ ‚àò proj‚ÇÇ
\end{code}

\section{la'o zoi.\ \F{‚åä'‚Åª¬π‚Ñù}\ .zoi.}
ni'o la'o zoi.\ \F{‚åä'‚Åª¬π‚Ñù} \B r\ .zoi.\ namcu du la'o zoi.\ \F{‚åä'‚Åª¬π} \B r\ .zoi.

\begin{code}
‚åä'‚Åª¬π‚Ñù : ‚Ñù ‚Üí ‚Ñù
‚åä'‚Åª¬π‚Ñù (s , _ , r) = s , 0 , r
\end{code}

\section{la'oi .\F{sign}.}
ni'o ro da poi ke'a ctaipe la'oi .\F ‚Ñù.\ zo'u ga jonai ga je da zmadu li no gi du la'o zoi.\ \IC{Sign.+}\ .zoi.\ fa ko'a goi lo me'oi .\F{sign}.\ be da gi ko'a du la'o zoi.\ \IC{Sign.-}\ .zoi.

\begin{code}
sign : ‚Ñù ‚Üí Sign
sign = proj‚ÇÅ
\end{code}

\section{la'oi .\F{sign‚Ñ§}.}
ni'o ro da poi ke'a ctaipe la'oi .\F ‚Ñù.\ zo'u\ldots
\begin{itemize}
	\item ga jonai ga je da du li no gi li no du ko'a goi lo me'oi .\F{sign‚Ñ§}.\ be da gi
	\item ga jonai ga je da mleca li no gi ko'a du li ni'u pa gi
	\item ga je da zmadu li no gi ko'a du li pa
\end{itemize}

\begin{code}
sign‚Ñ§ : ‚Ñù ‚Üí ‚Ñ§
sign‚Ñ§ = {!!}
\end{code}

\section{la'o zoi.\ \F{¬Ø\AgdaUnderscore}\ .zoi.}
ni'o la'o zoi.\ \AgdaOperator{¬Ø} \B r\ .zoi.\ vujnu li no la'oi .\B r.

\begin{code}
¬Ø_ : ‚Ñù ‚Üí ‚Ñù
¬Ø_ (Sign.+ , n , f) = Sign.- , n , f
¬Ø_ (Sign.- , n , f) = Sign.+ , n , f
\end{code}

\section{la'o zoi.\ \F{from‚Ñù-}\ .zoi.}
ni'o la'o zoi.\ \F{from‚Ñù-} \B s \B a \B b\ .zoi.\ pilji lo sumji be la'oi .\B a.\ bei lo mu'oi glibau.\ decimal expansion .glibau.\ namcu be la'oi .\B b.\ zo'e poi ga jonai ga je la'oi .\B s.\ du la'o zoi.\ \IC{Sign.+}\ .zoi.\ gi ke'a du li pa gi ga je la'oi .\B s.\ du la'o zoi.\ \IC{Sign.-}\ .zoi.\ gi ke'a du li ni'u pa

\begin{code}
from‚Ñù- : Sign ‚Üí ‚Ñï ‚Üí (‚Ñï ‚Üí Digit 10) ‚Üí ‚Ñù
from‚Ñù- s n f = s , n , f
\end{code}

\section{la'o zoi.\ \F{from‚Ñï} .zoi.}
ni'o la'o zoi.\ \F{from‚Ñï} \B n\ .zoi.\ namcu du la'oi .\B n.

\begin{code}
from‚Ñï : ‚Ñï ‚Üí ‚Ñù
from‚Ñï n = from‚Ñù- Sign.+ n $ const ùîΩ.zero
\end{code}

\section{la'o zoi.\ \F{from‚Ñ§}\ .zoi.}
ni'o la'o zoi.\ \F{from‚Ñ§} \B z\ .zoi.\ namcu du la'oi .\B z.

\begin{code}
from‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñù
from‚Ñ§ (‚Ñ§.pos n) = from‚Ñï n
from‚Ñ§ (‚Ñ§.negsuc n) = ¬Ø from‚Ñï n
\end{code}

\section{la'o zoi.\ \F{fromùîª}\ .zoi.}
ni'o la .varik.\ na birti lo du'u ma kau zabna je cu lojbo je cu velcki la'o zoi.\ \F{fromùîª}\ .zoi.  .i ku'i lakne fa lo nu la .varik.\ cu facki

\begin{code}
fromùîª : Sign ‚Üí (‚Ñï ‚Üí Digit 10) ‚Üí ‚Ñù
fromùîª s f = from‚Ñù- s 0 f
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}+\AgdaUnderscore}\ .zoi.}
ni'o la'o zoi.\ \B a \OpF + \B b\ .zoi.\ sumji la'oi .\B a.\ la'oi .\B b.

\begin{code}
_+_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_+_ = {!!}
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}-\AgdaUnderscore}\ .zoi.}
ni'o la'o zoi.\ \B a \OpF - \B b\ .zoi.\ vujnu la'oi .\B a.\ la'oi .\B b.

\begin{code}
_-_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_-_ r s = r + (¬Ø s)
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}*\AgdaUnderscore}\ .zoi.}
ni'o la'o zoi.\ \B a \OpF * \B b\ .zoi.\ pilji la'oi .\B a.\ la'oi .\B b.

\begin{code}
_*_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_*_ = {!!}
\end{code}

\section{la \F{frinu}}
ni'o la'o zoi.\ \F{frinu} \B a \B b \AgdaUnderscore{}\ .zoi.\ frinu la'oi .\B a.\ la'oi .\B b.

\begin{code}
frinu : (_ d : ‚Ñù) ‚Üí ¬¨_ $ d ‚âà from‚Ñï 0 ‚Üí ‚Ñù
frinu = {!!}
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}\textasciicircum{}\AgdaUnderscore}\ .zoi.}
ni'o tenfa la'oi .\B a.\ la'oi .\B b.\ fa la'o zoi.\ \B a \OpF \textasciicircum{} \B b\ .zoi.

\begin{code}
_^_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_^_ = {!!}
\end{code}

\section{la'o zoi.\ \F{from‚Ñö}\ .zoi.}
ni'o la'o zoi.\ \F{from‚Ñö} \B k\ .zoi.\ namcu du la'oi .\B k.

\begin{code}
module From‚ÑöI where
  from‚Ñï[s]‚ââ0 : (n : ‚Ñï) ‚Üí ¬¨_ $ from‚Ñï (‚Ñï.suc n) ‚âà from‚Ñï 0
  from‚Ñï[s]‚ââ0 = N ‚àò‚ÇÇ r‚âà0‚áí‚åä'r‚â°0 ‚àò from‚Ñï ‚àò ‚Ñï.suc
    where
    N : {n : ‚Ñï} ‚Üí ¬¨_ $ ‚åä' (from‚Ñï $ ‚Ñï.suc n) ‚â° ‚Ñ§.+ 0
    N ()
    r‚âà0‚áí‚åä'r‚â°0 : (r : ‚Ñù) ‚Üí r ‚âà from‚Ñï 0 ‚Üí ‚åä' r ‚â° ‚Ñ§.+ 0
    r‚âà0‚áí‚åä'r‚â°0 = {!!}

from‚Ñö : ‚Ñö ‚Üí ‚Ñù
from‚Ñö (‚Ñö.mk‚Ñö a b N) = frinu (from‚Ñ§ a) 1+b $ from‚Ñï[s]‚ââ0 b
  where
  open From‚ÑöI
  1+b = from‚Ñï $ ‚Ñï.suc b
\end{code}

\section{la'oi .\F{Rational}.}
ni'o ga jo ctaipe la'o zoi.\ \F{Rational} \B r\ .zoi.\ gi la'oi .\B r.\ me'oi .rational.  .i cadga fa lo nu li'armi  .i le velcki zo'u ro da poi ke'a co'e zo'u da me'oi .rational.\ jo cu du lo su'o frinu

\begin{code}
Rational : ‚Ñù ‚Üí Set
Rational r = ‚àÉ $ r ‚âà_ ‚àò from‚Ñö
\end{code}

\section{la'oi .\F{Irrational}.}
ni'o ga jo ctaipe la'o zoi.\ \F{Irrational} \B r\ .zoi.\ gi la'oi .\B r.\ me'oi .irrational.  .i cadga fa lo nu li'armi  .i le velcki zo'u ro da poi ke'a co'e zo'u da me'oi .irrational.\ jo cu du lo no frinu

\begin{code}
Irrational : ‚Ñù ‚Üí Set
Irrational = ¬¨_ ‚àò Rational
\end{code}

\section{la'o zoi.\ \F{to‚Ñö}\ .zoi.}
ni'o la'oi .\B r.\ namcu du la'o zoi.\ \F{to‚Ñö} \Sym\{\B r\Sym\} \B R\ .zoi.

\begin{code}
to‚Ñö : {r : ‚Ñù} ‚Üí Rational r ‚Üí ‚Ñö
to‚Ñö = proj‚ÇÅ
\end{code}

\section{la'o zoi.\ \F{‚à£\AgdaUnderscore{}‚à£}\ .zoi.}
ni'o cu'alni la'oi .\B r.\ fa la'o zoi.\ \F{‚à£\AgdaUnderscore{}‚à£} \B r\ .zoi.

\begin{code}
‚à£_‚à£ : ‚Ñù ‚Üí ‚Ñù
‚à£_‚à£ r = from‚Ñù- Sign.+ ‚Ñ§.‚à£ ‚åä' r ‚à£ $ ‚åä'‚Åª¬π r
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}‚äì\AgdaUnderscore}\ .zoi.}
ni'o la'o zoi.\ \B r \OpF ‚äì \B s\ .zoi.\ nacmecrai la'oi .\B r.\ ce la'oi .\B s.

\begin{code}
module _‚äì_I where
  f : ‚àÄ {a} ‚Üí {A : Set a} ‚Üí A ‚Üí A ‚Üí Bool ‚Üí A
  f r s n = if n then s else r

  _‚â•·µá_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Bool
  _‚â•·µá_ = {!!}

_‚äì_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_‚äì_ r s = f r s $ _‚â•·µá_ r s
  where
  open _‚äì_I
\end{code}

\section{la'o zoi.\ \F{\AgdaUnderscore{}‚äî\AgdaUnderscore}\ .zoi.}
ni'o la'o zoi.\ \B r \OpF ‚äî \B s\ .zoi.\ nacyzmarai la'oi .\B r.\ ce la'oi .\B s.

\begin{code}
_‚äî_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_‚äî_ r s = _‚äì_I.f s r $ _‚äì_I._‚â•·µá_ r s
\end{code}

\section{le ctaipe be le su'u mapti}

\begin{code}
module Veritas where
\end{code}

% | ni'o zo'oi .lcblm. cmavlaka'i zo'e ja lu le ctaipe be le su'u mapti li'u
\newcommand\lcblm[1]{le ctaipe be le su'u mapti fa la'o zoi.\ #1\ .zoi.}

\subsection{\lcblm{\F{\AgdaUnderscore{}‚âà\AgdaUnderscore}}}

\begin{code}
  module _‚âà_ where
    ‚â°‚àß‚âó‚áí‚âà : {r s : ‚Ñù}
          ‚Üí ‚åä' r ‚â° ‚åä' s
          ‚Üí ‚åä'‚Åª¬π r ‚âó ‚åä'‚Åª¬π s
          ‚Üí r ‚âà s
    ‚â°‚àß‚âó‚áí‚âà = {!!}

    ‚â°‚áí‚âà : {r s : ‚Ñù} ‚Üí r ‚â° s ‚Üí r ‚âà s
    ‚â°‚áí‚âà refl = ‚â°‚àß‚âó‚áí‚âà refl $ Œª _ ‚Üí refl

    r‚âàr : (r : ‚Ñù) ‚Üí r ‚âà r
    r‚âàr _ = ‚â°‚áí‚âà refl

    ‚âà‚áí‚âà‚ç® : {r s : ‚Ñù} ‚Üí r ‚âà s ‚Üí s ‚âà r
    ‚âà‚áí‚âà‚ç® = {!!}

    ‚âà‚áí‚âØ : {r s : ‚Ñù} ‚Üí r ‚âà s ‚Üí ¬¨_ $ r > s
    ‚âà‚áí‚âØ = {!!}

    id‚â°[‚âà‚áí‚âà‚ç®]¬≤ : (r s : ‚Ñù)
               ‚Üí (d : r ‚âà s)
               ‚Üí d ‚â°_ $ ‚âà‚áí‚âà‚ç® $ ‚âà‚áí‚âà‚ç® d
    id‚â°[‚âà‚áí‚âà‚ç®]¬≤ = {!!}

    ‚âà‚àß‚âà‚áí‚âà : Transitive _‚âà_
    ‚âà‚àß‚âà‚áí‚âà = {!!}

    n,9+‚âàn+1 : (s : Sign)
             ‚Üí (n : ‚Ñï)
             ‚Üí (_‚âà_
                 (from‚Ñù- s n $ const 9F)
                 (from‚Ñù- s (‚Ñï.suc n) $ const ùîΩ.zero))
    n,9+‚âàn+1 = {!!}

    9‚âà : (r s : ‚Ñù)
       ‚Üí (i : ‚Ñï)
       ‚Üí ‚åä' r ‚â° ‚åä' s
       ‚Üí ¬¨_ $ ‚åä'‚Åª¬π r i ‚â° 9F
       ‚Üí ùîΩ.to‚Ñï (‚åä'‚Åª¬π s i) ‚â° ‚Ñï.suc (ùîΩ.to‚Ñï $ ‚åä'‚Åª¬π r i)
       ‚Üí (_ : (i' : ùîΩ.Fin $ i ‚Ñï.+ 1)
            ‚Üí let i'' = ùîΩ.to‚Ñï i' in
              ‚åä'‚Åª¬π r i'' ‚â° ‚åä'‚Åª¬π s i'')
       ‚Üí ((n : ‚Ñï) ‚Üí ‚åä'‚Åª¬π r (1 ‚Ñï.+ n ‚Ñï.+ i) ‚â° 9F)
       ‚Üí r ‚âà s
    9‚âà = {!!}

    ¬¨‚àÉ‚áí‚âà : (r s : ‚Ñù)
          ‚Üí (¬¨_ $ ‚àÉ $ Œª t ‚Üí _√ó_
              (¬¨_ $ t ‚âà from‚Ñï 0)
              (r ‚âà (s + t)))
          ‚Üí r ‚âà s
    ¬¨‚àÉ‚áí‚âà = {!!}

    ‚âà‚áí¬¨‚àÉ : (r s : ‚Ñù)
          ‚Üí r ‚âà s
          ‚Üí (¬¨_ $ ‚àÉ $ Œª t ‚Üí _√ó_
              (¬¨_ $ t ‚âà from‚Ñï 0)
              (r ‚âà (s + t)))
    ‚âà‚áí¬¨‚àÉ = {!!}

    ‚à£r-s‚à£>0‚áír‚ââs : (r s : ‚Ñù)
                ‚Üí ‚à£ r - s ‚à£ > from‚Ñï 0
                ‚Üí ¬¨_ $ r ‚âà s
    ‚à£r-s‚à£>0‚áír‚ââs = {!!}

    r‚ââs‚áí‚à£r-s‚à£>0 : (r s : ‚Ñù)
                ‚Üí ¬¨_ $ r ‚âà s
                ‚Üí ‚à£ r - s ‚à£ > from‚Ñï 0
    r‚ââs‚áí‚à£r-s‚à£>0 = {!!}

    r‚âàs‚áí‚à£r-s‚à£‚âà0 : (r s : ‚Ñù)
                ‚Üí r ‚âà s
                ‚Üí ‚à£ r - s ‚à£ ‚âà from‚Ñï 0
    r‚âàs‚áí‚à£r-s‚à£‚âà0 = {!!}

    ‚à£r-s‚à£‚âà0‚áír‚âàs : (r s : ‚Ñù)
                ‚Üí ‚à£ r - s ‚à£ ‚âà from‚Ñï 0
                ‚Üí r ‚âà s
    ‚à£r-s‚à£‚âà0‚áír‚âàs = {!!}

    ¬¨[r‚âàs‚áífr‚âàfs] : ¬¨ ((r s : ‚Ñù) ‚Üí (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí r ‚âà s ‚Üí f r ‚âà f s)
    ¬¨[r‚âàs‚áífr‚âàfs] = {!!}

    isEquivalence : Relation.Binary.IsEquivalence _‚âà_
    isEquivalence = record {
      refl = r‚âàr _;
      sym = ‚âà‚áí‚âà‚ç®;
      trans = ‚âà‚àß‚âà‚áí‚âà}

    setoid : Setoid _ _
    setoid = record {_‚âà_ = _‚âà_; isEquivalence = isEquivalence}

    0‚âà-0 : from‚Ñï 0 ‚âà (¬Ø from‚Ñï 0)
    0‚âà-0 = {!!}
\end{code}

\subsection{\lcblm{\F{from‚Ñï}}}

\begin{code}
  module From‚Ñï where
    pav : (n : ‚Ñï) ‚Üí ‚Ñ§.+_ n ‚â° ‚åä' (from‚Ñï n)
    pav _ = refl

    rel : (m n : ‚Ñï) ‚Üí ùîΩ.zero ‚â° ‚åä'‚Åª¬π (from‚Ñï m) n
    rel _ _ = refl

    ‚â¢‚áí‚ââ : (m n : ‚Ñï) ‚Üí ¬¨_ $ m ‚â° n ‚Üí ¬¨_ $ from‚Ñï m ‚âà from‚Ñï n
    ‚â¢‚áí‚ââ = {!!}

    from‚Ñï[s]‚ââ0 : (n : ‚Ñï) ‚Üí ¬¨_ $ from‚Ñï (‚Ñï.suc n) ‚âà from‚Ñï 0
    from‚Ñï[s]‚ââ0 = From‚ÑöI.from‚Ñï[s]‚ââ0

    from‚Ñï-from‚Ñö : (n : ‚Ñï)
                ‚Üí let C = Coprime.sym $ Coprime.1-coprimeTo n in
                  from‚Ñï n ‚âà from‚Ñö (‚Ñö.mk‚Ñö (‚Ñ§.+_ n) 0 C)
    from‚Ñï-from‚Ñö = {!!}

    from‚Ñï-Rational : (n : ‚Ñï) ‚Üí Rational $ from‚Ñï n
    from‚Ñï-Rational n = ‚Ñö.mk‚Ñö (‚Ñ§.+_ n) 0 c , from‚Ñï-from‚Ñö n
      where
      c = Coprime.sym $ 1-coprimeTo _

    id‚â°‚à£_‚à£‚àò‚åä'‚àòfrom‚Ñï : (n : ‚Ñï) ‚Üí n ‚â° ‚Ñ§.‚à£ ‚åä' $ from‚Ñï n ‚à£
    id‚â°‚à£_‚à£‚àò‚åä'‚àòfrom‚Ñï _ = refl

    from‚Ñï‚â•0 : (n : ‚Ñï) ‚Üí from‚Ñï n ‚â• from‚Ñï 0
    from‚Ñï‚â•0 0 = inj‚ÇÅ $ _‚âà_.‚â°‚áí‚âà refl
    from‚Ñï‚â•0 (‚Ñï.suc n) = inj‚ÇÇ {!!}
\end{code}

\subsection{\lcblm{\F{from‚Ñ§}}}

\begin{code}
  module From‚Ñ§ where
    from‚Ñ§-Rational : (z : ‚Ñ§) ‚Üí Rational $ from‚Ñ§ z
    from‚Ñ§-Rational z = ‚Ñ§‚Üí‚Ñö z , from‚Ñ§‚âàfrom‚Ñö‚àò‚Ñ§‚Üí‚Ñö z
      where
      ‚Ñ§‚Üí‚Ñö : ‚Ñ§ ‚Üí ‚Ñö
      ‚Ñ§‚Üí‚Ñö z = ‚Ñö.mk‚Ñö z 0 (Coprime.sym $ 1-coprimeTo _)
      from‚Ñ§‚âàfrom‚Ñö‚àò‚Ñ§‚Üí‚Ñö : (z : ‚Ñ§) ‚Üí from‚Ñ§ z ‚âà from‚Ñö (‚Ñ§‚Üí‚Ñö z)
      from‚Ñ§‚âàfrom‚Ñö‚àò‚Ñ§‚Üí‚Ñö = Œª z ‚Üí _‚âà_.‚âà‚áí‚âà‚ç® $ begin
        from‚Ñö (‚Ñ§‚Üí‚Ñö z) ‚âà‚ü® _‚âà_.r‚âàr _ ‚ü©
        from‚Ñö (‚Ñö.mk‚Ñö z 0 (Coprime.sym $ 1-coprimeTo _)) ‚âà‚ü® _‚âà_.r‚âàr _ ‚ü©
        frinu (from‚Ñ§ z) (from‚Ñï 1) (From‚Ñï.from‚Ñï[s]‚ââ0 0) ‚âà‚ü® _‚âà_.r‚âàr _ ‚ü©
        _ ‚âà‚ü® _‚âà_.‚â°‚áí‚âà $ sym $ r‚â°r/1 $ from‚Ñ§ z ‚ü©
        from‚Ñ§ z ‚àé
        where
        open import Relation.Binary.Reasoning.Setoid _‚âà_.setoid
        r‚â°r/1 : (r : ‚Ñù) ‚Üí r ‚â° frinu r (from‚Ñï 1) (From‚Ñï.from‚Ñï[s]‚ââ0 0)
        r‚â°r/1 = {!!}
\end{code}

\subsection{\lcblm{\F{¬Ø\AgdaUnderscore}}}

\begin{code}
  module ¬Ø_ where
    r‚âà-r‚áír‚âà0 : (r : ‚Ñù)
             ‚Üí r ‚âà_ $ ¬Ø r
             ‚Üí r ‚âà from‚Ñï 0
    r‚âà-r‚áír‚âà0 = {!!}

    r>0‚áí¬Ør‚âà¬Ør : (r : ‚Ñù)
              ‚Üí r > from‚Ñï 0
              ‚Üí (¬Ø r) ‚âà from‚Ñù- Sign.- ‚Ñ§.‚à£ ‚åä' r ‚à£ (‚åä'‚Åª¬π r)
    r>0‚áí¬Ør‚âà¬Ør = {!!}

    r<0‚áí¬Ør‚âà‚à£r‚à£ : (r : ‚Ñù) ‚Üí from‚Ñï 0 > r ‚Üí (¬Ø r) ‚âà ‚à£ r ‚à£
    r<0‚áí¬Ør‚âà‚à£r‚à£ = {!!}

    r-¬Øs‚âàr+s : (r s : ‚Ñù) ‚Üí (r - (¬Ø s)) ‚âà (r + s)
    r-¬Øs‚âàr+s = {!!}

    R[¬ØR] : (r : ‚Ñù) ‚Üí Rational r ‚Üí Rational $ ¬Ø r
    R[¬ØR] = {!!}

    I[¬ØI] : (r : ‚Ñù) ‚Üí Irrational r ‚Üí Irrational $ ¬Ø r
    I[¬ØI] = {!!}
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}+\AgdaUnderscore}}}

\begin{code}
  module _+_ where
    +‚âà+‚ç® : Commutative _‚âà_ _+_
    +‚âà+‚ç® = {!!}

    +-ass : Associative _‚âà_ _+_
    +-ass = {!!}

    id‚â°+0 : Algebra.Identity _‚â°_ (from‚Ñï 0) _+_
    id‚â°+0 = {!!} , {!!}

    id‚âà+0 : Algebra.Identity _‚âà_ (from‚Ñï 0) _+_
    id‚âà+0 = {!!}

    dratadratas : (r s : ‚Ñù)
                ‚Üí ¬¨_ $ r ‚âà from‚Ñï 0 √ó s ‚âà from‚Ñï 0
                ‚Üí let N = ¬¨_ ‚àò _‚âà_ (r + s) in
                  N r √ó N s
    dratadratas = {!!}

    r‚â°r‚ÇÅ+r‚ÇÇ : (r : ‚Ñù) ‚Üí r ‚â°_ $ from‚Ñ§ (‚åä' r) + ‚åä'‚Åª¬π‚Ñù r
    r‚â°r‚ÇÅ+r‚ÇÇ = {!!}

    r‚â°r‚ÇÇ+r‚ÇÅ : (r : ‚Ñù) ‚Üí r ‚â°_ $ ‚åä'‚Åª¬π‚Ñù r + from‚Ñ§ (‚åä' r)
    r‚â°r‚ÇÇ+r‚ÇÅ = {!!}

    rn+sn‚â°[r+s]n : (z‚ÇÅ z‚ÇÇ : ‚Ñ§)
                 ‚Üí from‚Ñ§ (z‚ÇÅ ‚Ñ§.+ z‚ÇÇ) ‚â° from‚Ñ§ z‚ÇÅ + from‚Ñ§ z‚ÇÇ
    rn+sn‚â°[r+s]n = {!!}

    r‚â°f+z : (s : Sign)
          ‚Üí (n : ‚Ñï)
          ‚Üí (f : ‚Ñï ‚Üí Digit 10)
          ‚Üí (_‚â°_
              (from‚Ñù- s n f)
              (fromùîª s f + from‚Ñ§ (s ‚Ñ§.‚óÉ n)))
    r‚â°f+z = {!!}

    ‚Ñï+ : (m n : ‚Ñï) ‚Üí from‚Ñï m + from‚Ñï n ‚â° from‚Ñï (m ‚Ñï.+ n)
    ‚Ñï+ = {!!}

    ‚Ñ§+ : (x z : ‚Ñ§) ‚Üí from‚Ñ§ x + from‚Ñ§ z ‚â° from‚Ñ§ (x ‚Ñ§.+ z)
    ‚Ñ§+ = {!!}

    ‚Ñö+ : {r s : ‚Ñù}
       ‚Üí (r' : Rational r)
       ‚Üí (s' : Rational s)
       ‚Üí r + s ‚â° from‚Ñö (proj‚ÇÅ r' ‚Ñö.+ proj‚ÇÅ s')
    ‚Ñö+ = {!!}

    r‚ââr+s : (r s : ‚Ñù) ‚Üí ¬¨_ $ s ‚âà from‚Ñï 0 ‚Üí ¬¨_ $ r ‚âà_ $ r + s
    r‚ââr+s = {!!}

    R[R+R] : (r s : ‚Ñù) ‚Üí Rational r ‚Üí Rational s ‚Üí Rational $ r + s
    R[R+R] r s R@(r' , _) S@(s' , _) = r' ‚Ñö.+ s' , _‚âà_.‚â°‚áí‚âà D
      where
      D = ‚Ñö+ R S

    I[I+R] : (r s : ‚Ñù) ‚Üí Irrational r ‚Üí Rational s ‚Üí Irrational $ r + s
    I[I+R] = {!!}
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}-\AgdaUnderscore}}}

\begin{code}
  module _-_ where
    0‚âàr-s : (r s : ‚Ñù) ‚Üí r ‚âà s ‚Üí from‚Ñï 0 ‚âà_ $ r - s
    0‚âàr-s = {!!}

    0‚âàr-r : (r : ‚Ñù) ‚Üí from‚Ñï 0 ‚âà_ $ r - r
    0‚âàr-r r = 0‚âàr-s r r $ _‚âà_.‚â°‚áí‚âà refl

    0‚â°r-0 : Algebra.RightZero _‚â°_ (from‚Ñï 0) _-_
    0‚â°r-0 = {!!}

    r-s-t‚âàr-[s+t] : (r s t : ‚Ñù) ‚Üí ((r - s) - t) ‚âà (r - (s + t))
    r-s-t‚âàr-[s+t] = {!!}

    -r‚âà0-r : (r : ‚Ñù) ‚Üí (¬Ø r) ‚âà (from‚Ñï 0 - r)
    -r‚âà0-r = {!!}

    r‚âà[r-s]+s : (r s : ‚Ñù) ‚Üí r ‚âà_ $ (r - s) + s
    r‚âà[r-s]+s = {!!}

    r‚âà0-[0-r] : (r : ‚Ñù) ‚Üí r ‚âà_ $ from‚Ñï 0 -_ $ from‚Ñï 0 - r
    r‚âà0-[0-r] = {!!}

    0‚âàr+[0-r] : (r 0' : ‚Ñù)
              ‚Üí 0' ‚âà from‚Ñï 0
              ‚Üí from‚Ñï 0 ‚âà_ $ r + (0' - r)
    0‚âàr+[0-r] = {!!}

    r>r-s : (r s : ‚Ñù) ‚Üí s > from‚Ñï 0 ‚Üí r >_ $ r - s
    r>r-s = {!!}

    I[I-R] : (r s : ‚Ñù) ‚Üí Irrational r ‚Üí Rational s ‚Üí Irrational $ r - s
    I[I-R] = {!!}

    R[R-R] : (r s : ‚Ñù) ‚Üí Rational r ‚Üí Rational s ‚Üí Rational $ r - s
    R[R-R] r s R S = _+_.R[R+R] r (¬Ø s) R {!!}
\end{code}

\subsection{\lcblm{\F{fromùîª}}}

\begin{code}
  module Fromùîª where
    S‚â°S : (s : Sign) ‚Üí (f : ‚Ñï ‚Üí Digit 10) ‚Üí s ‚â° sign (fromùîª s f)
    S‚â°S _ _ = refl

    f‚â°f : (s : Sign)
        ‚Üí (f : ‚Ñï ‚Üí Digit 10)
        ‚Üí f ‚âó ‚åä'‚Åª¬π (fromùîª s f)
    f‚â°f = {!!}

    0‚â°‚åä'[fromùîª] : (s : Sign)
                ‚Üí (f : ‚Ñï ‚Üí Digit 10)
                ‚Üí ‚Ñ§.+_ 0 ‚â° ‚åä' (fromùîª s f)
    0‚â°‚åä'[fromùîª] Sign.+ _ = refl
    0‚â°‚åä'[fromùîª] Sign.- _ = refl

    id‚â°‚åä'‚Åª¬π‚àòfromùîªx : (s : Sign)
                   ‚Üí (f : ‚Ñï ‚Üí Digit 10)
                   ‚Üí f ‚â° ‚åä'‚Åª¬π (fromùîª s f)
    id‚â°‚åä'‚Åª¬π‚àòfromùîªx = Œª _ _ ‚Üí refl
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}*\AgdaUnderscore}}}

\begin{code}
  module _*_ where
    r‚âà1*r : Algebra.Identity _‚âà_ (from‚Ñï 1) _*_
    r‚âà1*r = {!!}

    0‚âà0*r : Zero _‚âà_ (from‚Ñï 0) _*_
    0‚âà0*r = {!!}

    *‚âà*‚ç® : Commutative _‚âà_ _*_
    *‚âà*‚ç® = {!!}

    *-ass : Associative _‚âà_ _*_
    *-ass = {!!}

    r*n‚âà? : (r : ‚Ñù)
          ‚Üí (n : ‚Ñï)
          ‚Üí (_‚âà_
              (r * from‚Ñï n)
              (_+_
                (fromùîª (sign r) {!!})
                (from‚Ñ§ $ ‚Ñ§._+_
                  (‚åä' r ‚Ñ§.* ‚Ñ§.+_ 10)
                  {!!})))
    r*n‚âà? = {!!}

    r*10‚âà_ : (r : ‚Ñù)
           ‚Üí (_‚âà_
               (r * from‚Ñï 10)
               (_+_
                 (proj‚ÇÅ r , 0 , ‚åä'‚Åª¬π r ‚àò ‚Ñï.suc)
                 (from‚Ñ§ $ ‚Ñ§._+_
                   (‚åä' r ‚Ñ§.* ‚Ñ§.+_ 10)
                   (sign‚Ñ§ r ‚Ñ§.*_ $ ‚Ñ§.+_ $ ùîΩ.to‚Ñï $ ‚åä'‚Åª¬π r 0))))
    r*10‚âà_ = {!!}

    r*s>r : (r s : ‚Ñù)
          ‚Üí r > from‚Ñï 0
          ‚Üí s > from‚Ñï 1
          ‚Üí (r * s) > r
    r*s>r = {!!}

    r>r*s : (r s : ‚Ñù)
          ‚Üí r > from‚Ñï 0
          ‚Üí from‚Ñï 1 > ‚à£_‚à£ s
          ‚Üí r >_ $ r * s
    r>r*s = {!!}

    I[I*R] : (r s : ‚Ñù) ‚Üí Irrational r ‚Üí Rational s ‚Üí Irrational $ r * s
    I[I*R] = {!!}

    R[R*R] : (r s : ‚Ñù) ‚Üí Rational r ‚Üí Rational s ‚Üí Rational $ r * s
    R[R*R] = {!!}

    a*b‚âàa'*b' : (a a' b b' : ‚Ñù)
              ‚Üí a ‚âà a'
              ‚Üí b ‚âà b'
              ‚Üí (a * b) ‚âà (a' * b')
    a*b‚âàa'*b' = {!!}

    *-magma : Algebra.IsMagma _‚âà_ _*_
    *-magma = record {
      isEquivalence = _‚âà_.isEquivalence;
      ‚àô-cong = a*b‚âàa'*b' _ _ _ _}
\end{code}

\subsection{\lcblm{\F{frinu}}}

\begin{code}
  module Frinu where
    module I where
      r>1‚áír‚ââ0 : (r : ‚Ñù) ‚Üí r > from‚Ñï 1 ‚Üí ¬¨_ $ r ‚âà from‚Ñï 0
      r>1‚áír‚ââ0 r = >‚áí‚ââ r _ ‚àò r>1‚áír>0 {r}
        where
        >‚áí‚ââ : (r s : ‚Ñù) ‚Üí r > s ‚Üí ¬¨_ $ r ‚âà s
        >‚áí‚ââ = {!!}
        r>1‚áír>0 : {r : ‚Ñù} ‚Üí r > from‚Ñï 1 ‚Üí r > from‚Ñï 0
        r>1‚áír>0 = {!!}

    sez‚â°1 : (r : ‚Ñù) ‚Üí (N : _) ‚Üí frinu r r N ‚â° from‚Ñï 1
    sez‚â°1 = {!!}

    r‚â°r/1 : (r : ‚Ñù) ‚Üí r ‚â° frinu r (from‚Ñï 1) (From‚Ñï.from‚Ñï[s]‚ââ0 0)
    r‚â°r/1 = {!!}

    0‚âà0/r : (r s : ‚Ñù)
          ‚Üí (N : _)
          ‚Üí s ‚âà from‚Ñï 0
          ‚Üí from‚Ñï 0 ‚âà frinu s r N
    0‚âà0/r = {!!}

    ‚à£r/s‚à£<‚à£r‚à£ : (r s : ‚Ñù)
              ‚Üí ¬¨_ $ s ‚âà from‚Ñï 0
              ‚Üí (z : s > from‚Ñï 1)
              ‚Üí ‚à£ r ‚à£ > ‚à£ frinu r s (I.r>1‚áír‚ââ0 s z) ‚à£
    ‚à£r/s‚à£<‚à£r‚à£ = {!!}

    ‚à£r/s‚à£‚â§‚à£r‚à£ : (r s : ‚Ñù)
              ‚Üí (z : s > from‚Ñï 1)
              ‚Üí ‚à£ r ‚à£ ‚â• ‚à£ frinu r s (I.r>1‚áír‚ââ0 s z) ‚à£
    ‚à£r/s‚à£‚â§‚à£r‚à£ = {!!}

    -r/-s<-r : (r s : ‚Ñù)
             ‚Üí (z : s > from‚Ñï 1)
             ‚Üí let -_ = _-_ $ from‚Ñï 0 in
               (- r) > frinu (- r) (- s) {!!}
    -r/-s<-r = {!!}

    r<r/s : (r s : ‚Ñù)
          ‚Üí (N : _)
          ‚Üí from‚Ñï 1 > s
          ‚Üí s > from‚Ñï 0
          ‚Üí r > frinu r s N
    r<r/s = {!!}

    r‚âàs*r/s : (r s : ‚Ñù)
            ‚Üí (N : _)
            ‚Üí r ‚âà_ $ s * frinu r s N
    r‚âàs*r/s = {!!}
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}\textasciicircum\AgdaUnderscore}}}

\begin{code}
  module _^_ where
    id‚â°_^1 : Algebra.RightIdentity _‚â°_ (from‚Ñï 1) _^_
    id‚â°_^1 = {!!}

    1‚â°1^r : (r : ‚Ñù) ‚Üí from‚Ñï 1 ‚â° from‚Ñï 1 ^ r
    1‚â°1^r = {!!}

    1‚â°r^0 : (r 0' : ‚Ñù) ‚Üí 0' ‚âà from‚Ñï 0 ‚Üí from‚Ñï 1 ‚â° r ^ 0'
    1‚â°r^0 = {!!}

    0‚âà0^r : (r s : ‚Ñù)
          ‚Üí ¬¨_ $ r ‚âà from‚Ñï 0
          ‚Üí s ‚âà from‚Ñï 0
          ‚Üí from‚Ñï 0 ‚âà_ $ s ^ r
    0‚âà0^r = {!!}

    1‚â°0^0 : from‚Ñï 1 ‚â° from‚Ñï 0 ^ from‚Ñï 0
    1‚â°0^0 = 1‚â°r^0 0' 0' $ _‚âà_.‚â°‚áí‚âà refl
      where
      0' = from‚Ñï 0

    [r^s]^t‚âàr^[s*t] : (r s t : ‚Ñù) ‚Üí ((r ^ s) ^ t) ‚âà (r ^ (s * t))
    [r^s]^t‚âàr^[s*t] = {!!}

    r‚âà[r^s]^[1/s] : (r s : ‚Ñù)
                  ‚Üí (N : _)
                  ‚Üí r ‚âà_ $ (r ^ s) ^ frinu (from‚Ñï 1) s N
    r‚âà[r^s]^[1/s] = {!!}

    R[R^‚Ñï] : (r : ‚Ñù)
           ‚Üí (n : ‚Ñï)
           ‚Üí Rational r
           ‚Üí Rational $ r ^ from‚Ñï n
    R[R^‚Ñï] = {!!}

    R[R^r] : (r s : ‚Ñù)
           ‚Üí Set Function.‚àã {!!}
           ‚Üí Rational r ‚Üí Rational $ r ^ s
    R[R^r] = {!!}
    
    I[2^[1/2]] : (Irrational $ _^_
                   (from‚Ñï 2)
                   (frinu (from‚Ñï 1) _ (From‚Ñï.‚â¢‚áí‚ââ 2 0 $ Œª ())))
    I[2^[1/2]] = {!!}
\end{code}

\subsection{\lcblm{\F{‚åä'}}}

\begin{code}
  module ‚åä' where
    from‚Ñ§‚àò‚åä' : (r : ‚Ñù)
            ‚Üí ‚åä'‚Åª¬π r ‚âó const ùîΩ.zero
            ‚Üí r ‚â° from‚Ñ§ (‚åä' r)
    from‚Ñ§‚àò‚åä' = {!!}

    ‚åä'‚àòfrom‚Ñ§ : (z : ‚Ñ§) ‚Üí z ‚â°_ $ ‚åä' $ from‚Ñ§ z
    ‚åä'‚àòfrom‚Ñ§ = {!!}

    ‚àÉf‚â° : (r : ‚Ñù) ‚Üí ‚àÉ $ _‚â°_ r ‚àò _+ from‚Ñ§ (‚åä' r)
    ‚àÉf‚â° r = ‚åä'‚Åª¬π‚Ñù r , _+_.r‚â°r‚ÇÇ+r‚ÇÅ r
\end{code}

\subsection{\lcblm{\F{‚åä'‚Åª¬π‚Ñù}}}

\begin{code}
  module ‚åä'‚Åª¬π‚Ñù where
    I‚áíI[‚åä'‚Åª¬π‚Ñù] : (r : ‚Ñù) ‚Üí Irrational r ‚Üí Irrational $ ‚åä'‚Åª¬π‚Ñù r
    I‚áíI[‚åä'‚Åª¬π‚Ñù] = {!!}

    I[‚åä'‚Åª¬π‚Ñù]‚áíI : (r : ‚Ñù) ‚Üí Irrational $ ‚åä'‚Åª¬π‚Ñù r ‚Üí Irrational r
    I[‚åä'‚Åª¬π‚Ñù]‚áíI = {!!}

    ‚åä'‚Åª¬π‚Ñù‚â°‚åä'‚Åª¬π‚Ñù‚àò‚åä'‚Åª¬π‚Ñù : Algebra.IdempotentFun _‚â°_ ‚åä'‚Åª¬π‚Ñù
    ‚åä'‚Åª¬π‚Ñù‚â°‚åä'‚Åª¬π‚Ñù‚àò‚åä'‚Åª¬π‚Ñù _ = refl

    fromùîª‚â°‚åä'‚Åª¬π‚Ñù‚àòfromùîª : (s : Sign)
                      ‚Üí (f : ‚Ñï ‚Üí Digit 10)
                      ‚Üí fromùîª s f ‚â° ‚åä'‚Åª¬π‚Ñù (fromùîª s f)
    fromùîª‚â°‚åä'‚Åª¬π‚Ñù‚àòfromùîª _ _ = refl
\end{code}

\subsection{\lcblm{\F{sign}}}

\begin{code}
  module SignV where
    r>0‚áís[r]‚â°+ : (r : ‚Ñù) ‚Üí r > from‚Ñï 0 ‚Üí sign r ‚â° Sign.+
    r>0‚áís[r]‚â°+ = {!!}

    r<0‚áís[r]‚â°- : (r : ‚Ñù) ‚Üí r < from‚Ñï 0 ‚Üí sign r ‚â° Sign.-
    r<0‚áís[r]‚â°- = {!!}
\end{code}

\subsection{\lcblm{\F{sign‚Ñ§}}}

\begin{code}
  module Sign‚Ñ§ where
    >‚áí1 : (r : ‚Ñù) ‚Üí r > from‚Ñï 0 ‚Üí sign‚Ñ§ r ‚â° ‚Ñ§.+_ 1
    >‚áí1 = {!!}

    1‚áí> : (r : ‚Ñù) ‚Üí sign‚Ñ§ r ‚â° ‚Ñ§.+_ 1 ‚Üí r > from‚Ñï 0
    1‚áí> = {!!}

    <‚áí-1 : (r : ‚Ñù) ‚Üí from‚Ñï 0 > r ‚Üí sign‚Ñ§ r ‚â° ‚Ñ§.-_ (‚Ñ§.+_ 1)
    <‚áí-1 = {!!}

    -1‚áí< : (r : ‚Ñù) ‚Üí sign‚Ñ§ r ‚â° ‚Ñ§.-_ (‚Ñ§.+_ 1) ‚Üí from‚Ñï 0 > r
    -1‚áí< = {!!}

    ‚âà‚áí0 : (r : ‚Ñù) ‚Üí r ‚âà from‚Ñï 0 ‚Üí sign‚Ñ§ r ‚â° ‚Ñ§.+_ 0
    ‚âà‚áí0 = {!!}

    0‚áí‚âà : (r : ‚Ñù) ‚Üí sign‚Ñ§ r ‚â° ‚Ñ§.+_ 0 ‚Üí r ‚âà from‚Ñï 0
    0‚áí‚âà = {!!}

    jonais : (r : ‚Ñù)
           ‚Üí let s = sign‚Ñ§ r ‚â°_ in
             s (‚Ñ§.+_ 0) ‚äé s (‚Ñ§.+_ 1) ‚äé s (‚Ñ§.-_ $ ‚Ñ§.+_ 1)
    jonais = {!!}
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}>\AgdaUnderscore}}}

\begin{code}
  module _>_ where
    ¬¨[r>r] : Irreflexive _‚âà_ _>_
    ¬¨[r>r] = {!!}

    r+s>r : (r s : ‚Ñù) ‚Üí s > from‚Ñï 0 ‚Üí (r + s) > r
    r+s>r = {!!}

    >‚áí¬¨< : Asymmetric _>_
    >‚áí¬¨< = {!!}

    >‚áí‚ââ : (r s : ‚Ñù) ‚Üí r > s ‚Üí ¬¨_ $ r ‚âà s
    >‚áí‚ââ = {!!}

    ‚àÉ[>‚àß>‚ç®] : (r s : ‚Ñù) ‚Üí r > s ‚Üí ‚àÉ $ Œª t ‚Üí (r > t) √ó (t > s)
    ‚àÉ[>‚àß>‚ç®] r s z = frinu (r + s) (from‚Ñï 2) N , {!!} , {!!}
      where
      N = From‚Ñï.from‚Ñï[s]‚ââ0 1

    >‚àß>‚áí> : Transitive _>_
    >‚àß>‚áí> = {!!}

    >‚Ñ§‚áí> : (r s : ‚Ñù) ‚Üí ‚åä' r ‚Ñ§.> ‚åä' s ‚Üí r > s
    >‚Ñ§‚áí> = {!!}

    +r>-s : {r s : ‚Ñù}
          ‚Üí sign r ‚â° Sign.+
          ‚Üí sign s ‚â° Sign.-
            -- | ni'o sarcu ni'i zo'e joi le su'u li no na
            -- dubmau li no
          ‚Üí ¬¨_ $ r ‚âà from‚Ñï 0 √ó s ‚âà from‚Ñï 0
          ‚Üí r > s
    +r>-s = {!!}

    jonais : (r s : ‚Ñù) ‚Üí (r > s) ‚äé (s > r) ‚äé (r ‚âà s)
    jonais = {!!}
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}‚â•\AgdaUnderscore}}}

\begin{code}
  module _‚â•_ where
    ‚â•‚àß‚â•‚áí‚â• : Transitive _‚â•_
    ‚â•‚àß‚â•‚áí‚â• = {!!}

    ‚â•‚àß‚â•‚ç®‚áí‚âà : Relation.Binary.Antisymmetric _‚âà_ _‚â•_
    ‚â•‚àß‚â•‚ç®‚áí‚âà = {!!}

    ‚âà‚áí‚â• : {r s : ‚Ñù} ‚Üí r ‚âà s ‚Üí r ‚â• s
    ‚âà‚áí‚â• = inj‚ÇÅ

    >‚áí‚â• : {r s : ‚Ñù} ‚Üí r > s ‚Üí r ‚â• s
    >‚áí‚â• = inj‚ÇÇ

    r‚â•r : Reflexive _‚â•_
    r‚â•r = ‚âà‚áí‚â• $ _‚âà_.‚â°‚áí‚âà refl

    ‚â•‚áí¬¨< : {r s : ‚Ñù} ‚Üí r ‚â• s ‚Üí ¬¨_ $ r < s
    ‚â•‚áí¬¨< = {!!}

    ‚â•‚àß‚ââ‚áí> : {r s : ‚Ñù} ‚Üí r ‚â• s ‚Üí ¬¨_ $ r ‚âà s ‚Üí r > s
    ‚â•‚àß‚ââ‚áí> (inj‚ÇÅ d) N = d ‚áí‚áê N
    ‚â•‚àß‚ââ‚áí> (inj‚ÇÇ z) N = z

    ‚â•‚àß¬¨>‚áí‚âà : {r s : ‚Ñù} ‚Üí r ‚â• s ‚Üí ¬¨_ $ r > s ‚Üí r ‚âà s
    ‚â•‚àß¬¨>‚áí‚âà (inj‚ÇÅ d) N = d
    ‚â•‚àß¬¨>‚áí‚âà (inj‚ÇÇ z) N = z ‚áí‚áê N

    +r>-s : {r s : ‚Ñù}
          ‚Üí ¬¨_ $ r ‚âà from‚Ñï 0 √ó s ‚âà from‚Ñï 0
          ‚Üí sign r ‚â° Sign.+
          ‚Üí sign s ‚â° Sign.-
          ‚Üí r > s
    +r>-s = {!!}

    +r‚â•-s : {r s : ‚Ñù}
          ‚Üí sign r ‚â° Sign.+
          ‚Üí sign s ‚â° Sign.-
          ‚Üí r ‚â• s
    +r‚â•-s = {!!}

    ‚åä'r‚â•‚åä's‚áír‚â•s : {r s : ‚Ñù}
                ‚Üí ‚åä' r ‚Ñ§.‚â• ‚åä' s
                ‚Üí sign s ‚â° Sign.+ ‚äé s ‚âà from‚Ñï 0
                ‚Üí r ‚â• s
    ‚åä'r‚â•‚åä's‚áír‚â•s = {!!}

    jonais : (r s : ‚Ñù) ‚Üí (r ‚â• s) ‚äé (r < s)
    jonais r s with _>_.jonais r s
    ... | inj‚ÇÅ z = inj‚ÇÅ $ >‚áí‚â• z
    ... | inj‚ÇÇ (inj‚ÇÅ m) = inj‚ÇÇ m
    ... | inj‚ÇÇ (inj‚ÇÇ d) = inj‚ÇÅ $ inj‚ÇÅ d

    ¬¨‚â•‚áí< : {r s : ‚Ñù} ‚Üí ¬¨_ $ r ‚â• s ‚Üí r < s
    ¬¨‚â•‚áí< {r} {s} N with jonais r s
    ... | inj‚ÇÅ djm = djm ‚áí‚áê N
    ... | inj‚ÇÇ m = m
\end{code}

\subsection{\lcblm{\F{‚à£\AgdaUnderscore{}‚à£}}}

\begin{code}
  module ‚à£_‚à£ where
    r‚â•0‚áír‚âà‚à£r‚à£ : (r : ‚Ñù) ‚Üí r ‚â• from‚Ñï 0 ‚Üí r ‚âà ‚à£ r ‚à£
    r‚â•0‚áír‚âà‚à£r‚à£ = {!!}

    0>r‚áí‚à£r‚à£‚âà-r : (r : ‚Ñù) ‚Üí from‚Ñï 0 > r ‚Üí ‚à£ r ‚à£ ‚âà_ $ ¬Ø r
    0>r‚áí‚à£r‚à£‚âà-r = {!!}

    +r‚â°‚à£+r‚à£ : (r : ‚Ñù) ‚Üí sign r ‚â° Sign.+ ‚Üí r ‚â° ‚à£ r ‚à£
    +r‚â°‚à£+r‚à£ r refl = refl

    ‚à£_‚à£‚â°‚à£_‚à£‚àò‚à£_‚à£ : Algebra.IdempotentFun _‚â°_ ‚à£_‚à£
    ‚à£_‚à£‚â°‚à£_‚à£‚àò‚à£_‚à£ _ = refl

    ‚à£_‚à£‚âà‚à£_‚à£‚àò‚à£_‚à£ : Algebra.IdempotentFun _‚âà_ ‚à£_‚à£
    ‚à£_‚à£‚âà‚à£_‚à£‚àò‚à£_‚à£ = _‚âà_.‚â°‚áí‚âà ‚àò ‚à£_‚à£‚â°‚à£_‚à£‚àò‚à£_‚à£

    ‚âà‚áí‚à£_‚à£‚âà : Algebra.Congruent‚ÇÅ _‚âà_ ‚à£_‚à£
    ‚âà‚áí‚à£_‚à£‚âà {r} {s} d with sign r , sign s
    ... | Sign.+ , Sign.+ = begin
      ‚à£ r ‚à£ ‚âà‚ü® _‚âà_.‚â°‚áí‚âà $ sym $ +r‚â°‚à£+r‚à£ r {!!} ‚ü©
      r ‚âà‚ü® d ‚ü©
      s ‚âà‚ü® _‚âà_.‚â°‚áí‚âà $ +r‚â°‚à£+r‚à£ s {!!} ‚ü©
      ‚à£ s ‚à£ ‚àé
      where
      open import Relation.Binary.Reasoning.Setoid _‚âà_.setoid
    ... | Sign.+ , Sign.- = {!!}
    ... | Sign.- , Sign.+ = {!!}
    ... | Sign.- , Sign.- = {!!}

    jonais : (r : ‚Ñù) ‚Üí ‚à£ r ‚à£ ‚âà r ‚äé ‚à£ r ‚à£ ‚âà (¬Ø r)
    jonais = {!!}

    R[‚à£R‚à£] : (r : ‚Ñù) ‚Üí Rational r ‚Üí Rational ‚à£ r ‚à£
    R[‚à£R‚à£] = {!!}

    I[‚à£I‚à£] : (r : ‚Ñù) ‚Üí Irrational r ‚Üí Irrational ‚à£ r ‚à£
    I[‚à£I‚à£] = {!!}
\end{code}

\subsection{\lcblm{\F{\AgdaUnderscore{}‚äì\AgdaUnderscore}}}

\begin{code}
  module _‚äì_ where
    module I where
      open _‚äì_I
        using (
          _‚â•·µá_;
          f
        )

      ‚â•‚áí‚ä§ : {r s : ‚Ñù} ‚Üí r ‚â• s ‚Üí true ‚â° _‚â•·µá_ r s
      ‚â•‚áí‚ä§ = {!!}

      ‚ä§‚áí‚â• : (r s : ‚Ñù) ‚Üí true ‚â° _‚â•·µá_ r s ‚Üí r ‚â• s
      ‚ä§‚áí‚â• = {!!}

      <‚áí‚ä• : (r s : ‚Ñù) ‚Üí s > r ‚Üí false ‚â° _‚â•·µá_ r s
      <‚áí‚ä• = {!!}

      ‚ä•‚áí‚â§ : (r s : ‚Ñù) ‚Üí false ‚â° _‚â•·µá_ r s ‚Üí s ‚â• r
      ‚ä•‚áí‚â§ r s d with _‚â•_.jonais s r
      ... | inj‚ÇÅ djm = djm
      ... | inj‚ÇÇ z = d ‚áí‚áê T‚áí¬¨F (‚â•‚áí‚ä§ {r} {s} $ _‚â•_.>‚áí‚â• z)
        where
        T‚áí¬¨F : {x : Bool} ‚Üí true ‚â° x ‚Üí ¬¨_ $ false ‚â° x
        T‚áí¬¨F refl ()

      ‚ä•‚áí1 : ‚àÄ {a} ‚Üí {A : Set a} ‚Üí (x z : A) ‚Üí x ‚â° f x z false
      ‚ä•‚áí1 _ _ = refl

      ‚ä§‚áí2 : ‚àÄ {a} ‚Üí {A : Set a}
          ‚Üí (x : A)
          ‚Üí {z : A}
          ‚Üí z ‚â° f x z true
      ‚ä§‚áí2 _ = refl

    <‚áí1 : (r s : ‚Ñù) ‚Üí r < s ‚Üí r ‚â° r ‚äì s
    <‚áí1 r s m = subst (_‚â°_ r ‚àò _‚äì_I.f r s) (I.<‚áí‚ä• r s m) (I.‚ä•‚áí1 r s)

    ‚â•‚áí2 : (r s : ‚Ñù) ‚Üí r ‚â• s ‚Üí s ‚â° r ‚äì s
    ‚â•‚áí2 r s z = subst (_‚â°_ s ‚àò _‚äì_I.f r s) (I.‚â•‚áí‚ä§ z) (I.‚ä§‚áí2 r)

    ‚âà‚áí1 : {r s : ‚Ñù} ‚Üí r ‚âà s ‚Üí r ‚âà (r ‚äì s)
    ‚âà‚áí1 = {!!}

    ‚âà‚áí2 : {r s : ‚Ñù} ‚Üí r ‚âà s ‚Üí s ‚âà (r ‚äì s)
    ‚âà‚áí2 = {!!}

    ‚äì‚âà‚äì‚ç® : Commutative _‚âà_ _‚äì_
    ‚äì‚âà‚äì‚ç® r s with _‚â•_.jonais r s
    ... | inj‚ÇÅ djm = {!!}
    ... | inj‚ÇÇ m = {!!}

    ‚äì-ass : Associative _‚âà_ _‚äì_
    ‚äì-ass = {!!}

    ‚äì-sel : Algebra.Selective _‚â°_ _‚äì_
    ‚äì-sel r s with _‚â•_.jonais r s
    ... | inj‚ÇÅ djm = inj‚ÇÇ $ sym $ ‚â•‚áí2 r s djm
    ... | inj‚ÇÇ ml = inj‚ÇÅ $ sym $ <‚áí1 r s ml

    id‚âà‚äì‚ç® : Algebra.Idempotent _‚âà_ _‚äì_
    id‚âà‚äì‚ç® _ = _‚âà_.‚âà‚áí‚âà‚ç® $ ‚âà‚áí1 $ _‚âà_.‚â°‚áí‚âà refl
\end{code}

\subsection{\lcblm{\F{from‚Ñö}}}

\begin{code}
  module From‚Ñö where
    from‚Ñö-Rational : (k : ‚Ñö) ‚Üí Rational $ from‚Ñö k
    from‚Ñö-Rational k = k , _‚âà_.‚â°‚áí‚âà refl
\end{code}

\subsection{\lcblm{\F{Irrational}}}

\begin{code}
  module Irrational where
    R‚äéI : (r : ‚Ñù) ‚Üí Rational r ‚äé Irrational r
    R‚äéI = {!!}
\end{code}

\subsection{\lcblm{\F{to‚Ñö}}}

\begin{code}
  module To‚Ñö where
    id‚â°to‚Ñö‚àòfrom‚Ñö : (k : ‚Ñö) ‚Üí k ‚â° to‚Ñö {from‚Ñö k} (_ , _‚âà_.‚â°‚áí‚âà refl)
    id‚â°to‚Ñö‚àòfrom‚Ñö _ = refl

    to‚Ñö‚àòfrom‚Ñï : (n : ‚Ñï)
              ‚Üí let C = Coprime.sym $ Coprime.1-coprimeTo n in
                (_‚â°_
                  (to‚Ñö {from‚Ñï n} $ From‚Ñï.from‚Ñï-Rational n)
                  (‚Ñö.mk‚Ñö (‚Ñ§.+_ n) 0 C))
    to‚Ñö‚àòfrom‚Ñï _ = refl

    to‚Ñö‚àòfrom‚Ñ§ : (z : ‚Ñ§)
              ‚Üí let C = Coprime.sym $ Coprime.1-coprimeTo ‚Ñ§.‚à£ z ‚à£ in
                (_‚â°_
                  (to‚Ñö {from‚Ñ§ z} $ From‚Ñ§.from‚Ñ§-Rational z)
                  (‚Ñö.mk‚Ñö z 0 C))
    to‚Ñö‚àòfrom‚Ñ§ = {!!}
\end{code}

\section{le ctaipe be le su'u sumji joi co'e me'oi .group.}

\begin{code}
+--group : Algebra.IsGroup _‚âà_ _+_ (from‚Ñï 0) (from‚Ñï 0 -_)
+--group = record {
  isMonoid = record {
    isSemigroup = {!!};
    identity = {!!}};
  inverse = {!!};
  ‚Åª¬π-cong = {!!}}
\end{code}

\section{le ctaipe be le su'u sumji mu'oi glibau.\ abelian group .glibau.}

\begin{code}
ga+ : Algebra.IsAbelianGroup _‚âà_ _+_ (from‚Ñï 0) (from‚Ñï 0 -_)
ga+ = record {
  isGroup = +--group;
  comm = Veritas._+_.+‚âà+‚ç®}
\end{code}

\section{le ctaipe be le su'u me'oi .ring.}

\begin{code}
isRing : IsRing _‚âà_ _+_ _*_ (from‚Ñï 0 -_) (from‚Ñï 0) (from‚Ñï 1)
isRing = record {
  +-isAbelianGroup = ga+;
  *-isMonoid = record {
    isSemigroup = record {
      isMagma = Veritas._*_.*-magma;
      assoc = Veritas._*_.*-ass};
    identity = Veritas._*_.r‚âà1*r};
  distrib = {!!};
  zero = Veritas._*_.0‚âà0*r}
\end{code}
\end{document}
